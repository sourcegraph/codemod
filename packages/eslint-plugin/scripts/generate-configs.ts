import fs from 'fs'
import path from 'path'

import { TSESLint } from '@typescript-eslint/experimental-utils'
import picocolors from 'picocolors'
import { format, resolveConfig } from 'prettier'

import rules from '../src/rules'

function addAutoGeneratedComment(code: string): string {
    return [
        '// THIS CODE WAS AUTOMATICALLY GENERATED',
        '// DO NOT EDIT THIS CODE BY HAND',
        '// YOU CAN REGENERATE IT USING yarn generate:configs',
        '',
        code,
    ].join('\n')
}

const prettierConfig = resolveConfig.sync(__dirname)

interface LinterConfigRules {
    [name: string]: TSESLint.Linter.RuleLevel | TSESLint.Linter.RuleLevelAndOptions
}

interface LinterConfig extends TSESLint.Linter.Config {
    extends?: string | string[]
    plugins?: string[]
}

const RULE_NAME_PREFIX = '@sourcegraph/sourcegraph/'
const MAX_RULE_NAME_LENGTH = Object.keys(rules).reduce((accumulator, name) => {
    return Math.max(accumulator, name.length)
}, 0)
const DEFAULT_RULE_SETTING = 'warn'
const BASE_RULES_TO_BE_OVERRIDDEN = new Map(
    Object.entries(rules)
        .filter(([, rule]) => {
            return rule.meta.docs?.extendsBaseRule
        })
        .map(([ruleName, rule]) => {
            return [
                ruleName,
                typeof rule.meta.docs?.extendsBaseRule === 'string' ? rule.meta.docs?.extendsBaseRule : ruleName,
            ] as const
        })
)
const EXTENDS = ['./configs/base']

const ruleEntries: [string, TSESLint.RuleModule<string, unknown[]>][] = Object.entries(rules).sort((a, b) => {
    return a[0].localeCompare(b[0])
})

/**
 * Helper function reduces records to key - value pairs.
 */
function reducer<TMessageIds extends string>(
    config: LinterConfigRules,
    entry: [string, TSESLint.RuleModule<TMessageIds, unknown[]>],
    settings: {
        errorLevel?: 'error' | 'warn'
        filterDeprecated: boolean
        filterRequiresTypeChecking?: 'include' | 'exclude'
    }
): LinterConfigRules {
    const key = entry[0]
    const value = entry[1]

    if (settings.filterDeprecated && value.meta.deprecated) {
        return config
    }

    // Explicitly exclude rules requiring type-checking
    if (settings.filterRequiresTypeChecking === 'exclude' && value.meta.docs?.requiresTypeChecking === true) {
        return config
    }

    // Explicitly include rules requiring type-checking
    if (settings.filterRequiresTypeChecking === 'include' && value.meta.docs?.requiresTypeChecking !== true) {
        return config
    }

    const ruleName = `${RULE_NAME_PREFIX}${key}`
    const recommendation = value.meta.docs?.recommended
    const usedSetting = settings.errorLevel
        ? settings.errorLevel
        : !recommendation
        ? DEFAULT_RULE_SETTING
        : recommendation

    if (BASE_RULES_TO_BE_OVERRIDDEN.has(key)) {
        const baseRuleName = BASE_RULES_TO_BE_OVERRIDDEN.get(key)

        if (baseRuleName) {
            console.log(
                baseRuleName
                    .padStart(RULE_NAME_PREFIX.length + baseRuleName.length)
                    .padEnd(RULE_NAME_PREFIX.length + MAX_RULE_NAME_LENGTH),
                '=',
                picocolors.green('off')
            )
            config[baseRuleName] = 'off'
        }
    }
    console.log(
        `${picocolors.dim(RULE_NAME_PREFIX)}${key.padEnd(MAX_RULE_NAME_LENGTH)}`,
        '=',
        usedSetting === 'error' ? picocolors.red(usedSetting) : picocolors.yellow(usedSetting)
    )
    config[ruleName] = usedSetting

    return config
}

/**
 * Helper function writes configuration.
 */
function writeConfig(config: LinterConfig, filePath: string): void {
    // note: we use `export =` because ESLint will import these configs via a commonjs import
    const code = `export = ${JSON.stringify(config)};`
    const configString = format(addAutoGeneratedComment(code), {
        parser: 'typescript',
        ...prettierConfig,
    })
    fs.writeFileSync(filePath, configString)
}

const baseConfig: LinterConfig = {
    parser: '@typescript-eslint/parser',
    parserOptions: {
        sourceType: 'module',
    },
    plugins: ['@sourcegraph/eslint-plugin-sourcegraph'],
}
writeConfig(baseConfig, path.resolve(__dirname, '../src/configs/base.ts'))

console.log()
console.log('------------------------------------------------ all.ts ------------------------------------------------')
const allConfig: LinterConfig = {
    extends: EXTENDS,
    rules: ruleEntries.reduce<LinterConfigRules>((config, entry) => {
        return reducer(config, entry, { errorLevel: 'error', filterDeprecated: true })
    }, {}),
}
writeConfig(allConfig, path.resolve(__dirname, '../src/configs/all.ts'))
